{"version":3,"sources":["utils/socket_util.js","components/search_files.js","components/downloads.js","components/home.js","App.js","utils/history.js","routers.js","serviceWorker.js","index.js"],"names":["socket","Search","Input","SearchFiles","props","openFilePreview","previewContent","closeFilePreview","kewordRef","React","createRef","state","listData","listInfo","filePreview","this","style","width","height","placeholder","enterButton","size","onSearch","value","searchKeyword","pageNumber","ref","title","visible","onOk","onCancel","itemLayout","bordered","dataSource","renderItem","item","Item","key","actions","type","onClick","downloadFile","icon","DownloadOutlined","Meta","block","content","fileName","description","peerId","defaultCurrent","total","pageSize","onChange","page","current","input","defaultPageSize","nextProps","prevState","JSON","stringify","Component","Downloads","downloads","Date","createdOn","done","deleteDownload","_id","_rev","handleDownload","fileHash","start","peersInfo","length","eventEmitter","require","EventEmitter","socketEmitter","Home","componentDidMount","getDownloads","addListener","componentWillUnmount","removeListener","keyword","a","updateSearch","axios","get","res","data","result","parse","map","info","_source","appKey","filename","meta","piecesHash","setState","fileInfo","post","success","message","msg","error","put","all","delete","contentStyle","filterStyle","downloadStyle","display","flexDirection","justifyContent","overflow","background","App","io","connect","on","console","log","emit","className","exact","path","component","history","createBrowserHistory","interceptors","response","use","status","Msg","Routes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e6402f82.chunk.js","sourcesContent":["import io from 'socket.io-client';\r\nvar events = require('events');\r\nvar eventEmitter = new events.EventEmitter();\r\n\r\nlet socket;\r\n\r\nexport function init_socket_client() {\r\n\tif(io && !socket) {\r\n        socket = io.connect('/')\r\n\r\n        socket.on('connect', function() {\r\n            console.log(\"socket connected\")\r\n        });\r\n\r\n        socket.on('refresh_downloads', function() {\r\n            eventEmitter.emit('refresh_downloads');\r\n        })\r\n    }\r\n}\r\n\r\nexport function socketEmitter() {\r\n    return eventEmitter\r\n}","import React, { Component } from \"react\";\r\nimport { Input, List, Button, Modal, Pagination } from 'antd';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\n\r\nconst { Search } = Input;\r\n\r\nclass SearchFiles extends Component {\r\n\r\n\tconstructor(props) {\r\n        super(props);\r\n        this.kewordRef = React.createRef();\r\n        this.state = {\r\n            // keyword: this.props.keyword || '',\r\n            listData: this.props.listData || [],\r\n            listInfo: this.props.listInfo || {},\r\n            filePreview: false,\r\n            previewContent: ''\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if(JSON.stringify(nextProps.listData) !== JSON.stringify(prevState.listData) || JSON.stringify(nextProps.listInfo) !== JSON.stringify(prevState.listInfo))\r\n            return {listData: nextProps.listData, listInfo: nextProps.listInfo}\r\n        else \r\n            return null\r\n    }\r\n\r\n    openFilePreview = (previewContent) => {\r\n        //this.setState({previewContent, filePreview:true})\r\n    }\r\n\r\n    closeFilePreview = () => {\r\n        //this.setState({filePreview: false});\r\n    }\r\n\r\n\trender() {\r\n        let {listData, previewContent, filePreview, listInfo} = this.state\r\n\r\n\t\treturn (\r\n            <div style={{width: \"100%\", height:\"100%\"}}>\r\n                <Search\r\n                    placeholder=\"search file\"\r\n                    enterButton=\"Search\"\r\n                    size=\"large\"\r\n                    onSearch={value => this.props.searchKeyword(value, listInfo.pageNumber)}\r\n                    style={{width:\"50%\"}}\r\n                    ref={this.kewordRef}\r\n                />\r\n                <Modal\r\n                    title=\"Preview\"\r\n                    visible={filePreview}\r\n                    onOk={this.closeFilePreview}\r\n                    onCancel={this.closeFilePreview}\r\n                >\r\n                    <p>{previewContent}</p>\r\n                </Modal>\r\n                <List\r\n                    itemLayout=\"vertical\"\r\n                    size=\"large\"\r\n                    bordered={true}\r\n                    dataSource={listData}\r\n                    renderItem={item => (\r\n                        <List.Item\r\n                            key={item.title}\r\n                            actions={[<Button type=\"primary\" onClick={() => this.props.downloadFile(item)} icon={<DownloadOutlined/>}>Download</Button>]}\r\n                        >\r\n                            <List.Item.Meta\r\n                                title={<Button type=\"link\" block onClick={() => this.openFilePreview(item.content)}>{item.fileName}</Button>}\r\n                                description={`type: ${item.type} size: ${item.size} peerId: ${item.peerId}`}\r\n                            />\r\n                            {/* {item.content.substring(0, 100)} */}\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n                <Pagination defaultCurrent={1} total={listInfo.total/listInfo.pageSize} onChange={(page, pageSize) => {this.props.searchKeyword(this.kewordRef.current.input.state.value, page)}} defaultPageSize={1}/>\r\n            </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default SearchFiles;","import React, { Component } from \"react\";\r\nimport { List, Button } from 'antd';\r\n\r\nclass Downloads extends Component {\r\n\r\n\tconstructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            downloads: this.props.downloads || []\r\n        }\r\n\t}\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if(JSON.stringify(nextProps.downloads) !== JSON.stringify(prevState.downloads))\r\n            return {downloads: nextProps.downloads}\r\n        else \r\n            return null\r\n    }\r\n\r\n\trender() {\r\n\t\treturn (\r\n            <div>\r\n                <List\r\n                    itemLayout=\"horizontal\"\r\n                    dataSource={this.state.downloads}\r\n                    renderItem={item => (\r\n                    <List.Item>\r\n                        <List.Item.Meta\r\n                            title={item.fileName}\r\n                            description={`type: ${item.type} createdOn: ${new Date(item.createdOn)}`}\r\n                        />\r\n                        {   !item.done ?\r\n                            <Button type=\"primary\" onClick={() => this.props.handleDownload(item.fileHash, !item.start)}>{item.start ? \"Stop\" : \"Start\"}</Button> :\r\n                            <Button type=\"primary\" onClick={() => this.props.deleteDownload(item._id, item._rev, item.fileName, true)}>{\"Remove full download\"}</Button>\r\n                        }\r\n                        {\r\n                            !item.start ? \r\n                            <Button type=\"primary\" onClick={() => this.props.deleteDownload(item._id, item._rev, item.fileName)}>{\"Remove download\"}</Button> :\r\n                            null\r\n                        }\r\n                        {   item.peersInfo.length == 0 ? \"No Peers online\": null}\r\n                    </List.Item>\r\n                    )}\r\n                />\r\n            </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Downloads;","import axios from \"axios\"\r\nimport React, { Component } from \"react\";\r\nimport SearchFiles from './search_files'\r\nimport Downloads from './downloads'\r\nimport { message } from \"antd\";\r\nimport { socketEmitter } from \"../utils/socket_util\"\r\n\r\nclass Home extends Component {\r\n\r\n\tconstructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            keyword: '',\r\n            listData: [],\r\n            listInfo: {\r\n                total: 0,\r\n                pageNumber: 1,\r\n                pageSize: 1\r\n            },\r\n            downloads: [],\r\n        }\r\n\t}\r\n\r\n    componentDidMount = () => {\r\n        this.getDownloads()\r\n        //socketEmitter.on('refresh_downloads', this.getDownloads())\r\n        socketEmitter().addListener('refresh_downloads', this.getDownloads)\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        socketEmitter().removeListener('refresh_downloads')\r\n    }\r\n\r\n    searchKeyword = async (keyword, pageNumber) => {\r\n        let {listInfo} = this.state\r\n        let updateSearch = {keyword, listData:[], listInfo:{\r\n            total: 0,\r\n            pageNumber: 1,\r\n            pageSize: 1\r\n        }}\r\n        pageNumber = this.state.keyword !== keyword ? 1 : pageNumber\r\n        \r\n        let res = await axios.get(`/sync/searchFiles?keyword=${keyword}&pageSize=${listInfo.pageSize}&pageNumber=${pageNumber}`)\r\n        if(res && res.data && res.data.result) {\r\n            let listData = []\r\n            let listInfo = JSON.parse(JSON.stringify(this.state.listInfo))\r\n    \r\n            let data = res.data\r\n            listData = data.result.map((info) => {\r\n                return {\r\n                    peerId: info._source.appKey,\r\n                    content: info._source.content,\r\n                    fileName: info._source.filename,\r\n                    type: info._source.meta.type,\r\n                    size: info._source.meta.size,\r\n                    fileHash: info._source.meta.fileHash,\r\n                    piecesHash: info._source.meta.piecesHash\r\n                }\r\n            })\r\n\r\n            if(data.total)\r\n                listInfo.total =  data.total\r\n            if(data.pageNumber )\r\n                listInfo.pageNumber = data.pageNumber \r\n            if(data.pageSize)\r\n                listInfo.pageSize = data.pageSize\r\n            \r\n            updateSearch.listData = listData\r\n            updateSearch.listInfo = listInfo\r\n        }\r\n        this.setState(updateSearch)\r\n    }\r\n    \r\n    downloadFile = async (fileInfo) => {\r\n        let {fileHash, piecesHash, type, fileName} = fileInfo\r\n        let res = await axios.post(`/sync/downloadFile`, {fileHash, piecesHash, type, fileName})\r\n\r\n        if(res && res.data && res.data.success) {\r\n            message.success(res.data.msg || \"started\")\r\n            this.getDownloads()\r\n        } \r\n        else if(res && res.data)\r\n            message.error(res.data.msg)\r\n    }\r\n\r\n    getDownloads = async () => {\r\n        let res = await axios.get(`/sync/getDownloads`)\r\n\r\n        if(res && res.data && res.data.success && res.data.downloads) {\r\n            this.setState({downloads: res.data.downloads})\r\n        }\r\n    }\r\n\r\n    handleDownload = async (fileHash, start) => {\r\n        await axios.put(`/sync/handleDownload`, {fileHash, start})\r\n        this.getDownloads()\r\n    }\r\n\r\n    deleteDownload = async (_id, _rev, fileName, all=false) => {\r\n        await axios.delete('/sync/deleteDownload', {data:{_id, _rev, fileName, all}})\r\n        this.getDownloads()\r\n    }\r\n\r\n\trender() {\r\n        let {keyword, listData, downloads, listInfo} = this.state\r\n\t\treturn (\r\n            <div style={contentStyle}>\r\n                <div style={filterStyle}>\r\n                    <SearchFiles searchKeyword={this.searchKeyword} listData={listData} listInfo={listInfo} downloadFile={this.downloadFile}/>\r\n                </div>\r\n                <div style={downloadStyle}>\r\n                    <Downloads downloads={downloads} handleDownload={this.handleDownload} deleteDownload={this.deleteDownload}/>\r\n                </div>\r\n            </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst filterStyle = {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    width:\"80%\",\r\n    height:\"100%\"\r\n}\r\n\r\nconst downloadStyle = {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    width:\"20%\",\r\n    height: '500px',\r\n    overflow: \"auto\"\r\n}\r\n\r\nconst contentStyle = {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"left\",\r\n    background: '#fff', \r\n    height: '100%'\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\nimport { Switch, Route, Prompt } from 'react-router-dom';\nimport Home from './components/home'\nimport { init_socket_client } from './utils/socket_util'\n// import { Layout, Menu, Button } from 'antd';\n\nimport './App.css';\nimport \"../node_modules/antd/dist/antd.css\";\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tinit_socket_client()\n\t}\n\n\trender() {\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t\t\t<Route exact path=\"/home\" component={Home} />\n\t\t\t</Switch>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","import createBrowserHistory from 'history/createBrowserHistory';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;","import React from 'react';\r\nimport { Route, Router, BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport history from \"./utils/history\";\r\nimport axios from 'axios'\r\n\r\n\r\naxios.interceptors.response.use(response => {\r\n        return response;\r\n    }, error => {\r\n        if (error.response.status === 401) {\r\n            if(error.response.data && error.response.data.Msg)\r\n                //message.error(error.response.data.Msg)\r\n                return error.response;\r\n        }\r\n        return error;\r\n    }\r\n);\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Router history={history}>\r\n            <Route path=\"/\" component={App}/>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default Routes;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from \"./routers\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Routes/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}